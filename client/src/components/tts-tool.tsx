import React, { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Label } from "@/components/ui/label";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { useTTS } from "@/hooks/use-tts";
import { useFileUpload } from "@/hooks/use-file-upload";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import AudioVisualizer from "./audio-visualizer";
import QuotaWarning from "./quota-warning";
import VoicePreview from "./voice-preview";
import TextTemplatesCompact from "./text-templates-compact";
import { 
  CloudUpload, 
  Play, 
  Pause, 
  Download, 
  FileText, 
  Loader2, 
  Volume2, 
  Settings,
  ChevronDown,
  SpellCheck,
  Languages,
  Square,
  Save,
  Sparkles,
  Split,
  FileStack,
  Crown,
  VolumeX,
  Volume1,
  Trash
} from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

export default function TTSTool() {
  const [text, setText] = useState("");
  const [maxCharacters, setMaxCharacters] = useState(500);
  const [voice, setVoice] = useState("alloy");
  
  // Initialize voice based on authentication status
  useEffect(() => {
    if (!isAuthenticated) {
      setVoice("alloy");
    }
  }, []); // Run once on mount
  const [title, setTitle] = useState("");
  const [format, setFormat] = useState("mp3");
  const [useSSML, setUseSSML] = useState(false);
  const [activeTab, setActiveTab] = useState("create");
  const [speed, setSpeed] = useState([1.0]);
  const [pitch, setPitch] = useState([1.0]);
  const [volume, setVolume] = useState([1.0]);
  const [isAdvancedOpen, setIsAdvancedOpen] = useState(false);
  
  // Audio visualizer state
  const [visualizerMode, setVisualizerMode] = useState<"particles" | "liquid" | "neural" | "galaxy">("particles");
  const [visualizerColor, setVisualizerColor] = useState<"sunset" | "ocean" | "forest" | "cosmic">("sunset");
  const [showFrequencyLabels, setShowFrequencyLabels] = useState(false);
  
  // Audio playback state
  const [playbackVolume, setPlaybackVolume] = useState([1.0]);
  const [isMuted, setIsMuted] = useState(false);
  const [savedVolume, setSavedVolume] = useState(1.0);
  const [showVolumeControls, setShowVolumeControls] = useState(false);
  
  // Ref for volume controls to detect outside clicks
  const volumeControlsRef = useRef<HTMLDivElement>(null);

  // Handle click outside to hide volume controls
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (volumeControlsRef.current && !volumeControlsRef.current.contains(event.target as Node)) {
        setShowVolumeControls(false);
      }
    };

    if (showVolumeControls) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showVolumeControls]);

  const { toast } = useToast();
  const { user, isAuthenticated } = useAuth();
  
  // Debug authentication status
  useEffect(() => {
    console.log('üîê Authentication status:', { isAuthenticated, user: user?.email });
  }, [isAuthenticated, user]);

  // Fetch app settings including character limit
  const { data: appSettings } = useQuery<any>({
    queryKey: ["/api/app-settings"],
    staleTime: 0, // Always fetch fresh data for immediate updates
    refetchInterval: 30000, // Refetch every 30 seconds
  });

  // Fetch audio files for quota calculation
  const { data: audioFiles = [] } = useQuery<any[]>({
    queryKey: ["/api/audio-files"],
    enabled: isAuthenticated,
  });

  // Get available voices from API
  const { data: voices = [] } = useQuery<any[]>({
    queryKey: ["/api/voices"],
    retry: false,
  });

  // Force alloy for guests - run immediately and on every render
  useEffect(() => {
    if (!isAuthenticated) {
      setVoice("alloy");
      // Also clear any saved preferences for guests
      localStorage.removeItem('tts-preferences');
    }
  }, [isAuthenticated]);

  // Additional safety: force alloy if guest user tries to change voice
  const handleVoiceChange = (newVoice: string) => {
    if (!isAuthenticated && newVoice !== "alloy") {
      toast({
        title: "C·∫ßn ƒëƒÉng nh·∫≠p",
        description: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y",
        variant: "destructive",
      });
      return;
    }
    setVoice(newVoice);
  };

  // Update maxCharacters based on user authentication status and subscription
  useEffect(() => {
      if (!isAuthenticated) {
      // Guest users get limit from app settings (admin configurable)
      setMaxCharacters((appSettings as any)?.guestMaxCharacters || 100);
    } else if (appSettings) {
        // Authenticated users get limits based on subscription
        const subscriptionType = user?.subscriptionType || 'free';
        if (subscriptionType === 'premium') {
        setMaxCharacters((appSettings as any).premiumMaxCharacters || 5000);
        } else if (subscriptionType === 'pro') {
        setMaxCharacters((appSettings as any).proMaxCharacters || 2000);
        } else {
        setMaxCharacters((appSettings as any).freeMaxCharacters || 500);
      }
    }
  }, [appSettings, isAuthenticated, user?.subscriptionType]);

  // Load saved preferences on component mount
  useEffect(() => {
    const savedPreferences = localStorage.getItem('tts-preferences');
    if (savedPreferences) {
      try {
        const prefs = JSON.parse(savedPreferences);
        // Only load voice preference for authenticated users
        if (prefs.voice && isAuthenticated) setVoice(prefs.voice);
        if (prefs.speed) setSpeed([prefs.speed]);
        if (prefs.pitch) setPitch([prefs.pitch]);
        if (prefs.volume) setVolume([prefs.volume]);
        if (prefs.format) setFormat(prefs.format);
      } catch (error) {
        console.log('Failed to load preferences');
      }
    }
  }, [isAuthenticated]);

  // Save preferences when they change
  const savePreferences = () => {
    const preferences = {
      voice,
      speed: speed[0],
      pitch: pitch[0],
      volume: volume[0],
      format
    };
    localStorage.setItem('tts-preferences', JSON.stringify(preferences));
    toast({
      title: "ƒê√£ l∆∞u c√†i ƒë·∫∑t",
      description: "C√†i ƒë·∫∑t gi·ªçng n√≥i ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng",
    });
  };
  const {
    generateAudio,
    playAudio,
    pause,
    resume,
    stop,
    downloadAudio,
    isPlaying,
    isPaused,
    isGenerating,
    progress,
    duration,
    currentTime,
    hasGeneratedAudio,
    playbackVolume: ttsPlaybackVolume,
    setPlaybackVolume: setTtsPlaybackVolume,
    audioRef: ttsAudioRef
  } = useTTS(isAuthenticated);

  // Global audio ref to control volume
  const globalAudioRef = useRef<HTMLAudioElement | null>(null);
  const allAudioElements = useRef<HTMLAudioElement[]>([]);

  // Sync local volume with useTTS volume
  useEffect(() => {
    setPlaybackVolume([ttsPlaybackVolume]);
  }, [ttsPlaybackVolume]);

  // Sync volume slider in settings with playback volume
  useEffect(() => {
    setVolume([playbackVolume[0]]);
  }, [playbackVolume]);

  // Real-time volume control - update audio immediately when volume changes
  useEffect(() => {
    const targetVolume = isMuted ? 0 : playbackVolume[0];
    
    // Update useTTS audioRef (this is the primary audio element)
    if (ttsAudioRef.current) {
      ttsAudioRef.current.volume = targetVolume;
    }

    // Update all audio elements in the DOM
    const allAudioElements = document.querySelectorAll('audio');
    allAudioElements.forEach(audio => {
      audio.volume = targetVolume;
    });
  }, [playbackVolume, isMuted, ttsAudioRef]);

  // Handle volume controls
  const handleVolumeChange = (newVolume: number[]) => {
    setPlaybackVolume(newVolume);
    setTtsPlaybackVolume(newVolume[0]); // Sync with useTTS
    if (newVolume[0] > 0 && isMuted) {
      setIsMuted(false);
    }
  };

  const handleMuteToggle = () => {
    if (isMuted) {
      // Unmute
      setIsMuted(false);
      const volumeToRestore = savedVolume > 0 ? savedVolume : 0.5;
      setPlaybackVolume([volumeToRestore]);
      setTtsPlaybackVolume(volumeToRestore);
    } else {
      // Mute
      setSavedVolume(playbackVolume[0]);
      setIsMuted(true);
      setPlaybackVolume([0]);
      setTtsPlaybackVolume(0);
    }
  };

  const handleVolumeIconClick = () => {
    setShowVolumeControls(!showVolumeControls);
  };

  // Check if current settings match previous generation  
  const checkIfSameConfig = (currentText: string, options: any) => {
    // Simple check - could be enhanced
    return false; // For now always allow generation
  };

  // Check if generate button should be disabled
  const isGenerateDisabled = 
    checkIfSameConfig(text, {
    voice,
    rate: speed[0],
    pitch: pitch[0],
    volume: volume[0]
    }) || 
    !text.trim() || 
    text.length > maxCharacters;

  const {
    isUploading,
    uploadFile,
    dragProps
  } = useFileUpload({
    onSuccess: (extractedText, filename) => {
      setText(extractedText);
      toast({
        title: "File uploaded successfully",
        description: `Extracted text from ${filename}`,
      });
    },
    onError: (error) => {
      const errorMessage = typeof error === 'string' ? error : ((error as any)?.message || "Kh√¥ng th·ªÉ x·ª≠ l√Ω file");
      toast({
        title: "T·∫£i file th·∫•t b·∫°i",
        description: errorMessage,
        variant: "destructive",
      });
    }
  });

  const handleGenerateAudio = async () => {
    // Force alloy for guests
    let voiceToUse = voice;
    if (!isAuthenticated) {
      setVoice("alloy");
      voiceToUse = "alloy";
    }
    if (!text.trim()) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi",
        variant: "destructive",
      });
      return;
    }

    // Check character limit first
    if (text.length > maxCharacters) {
      toast({
        title: "V∆∞·ª£t qu√° gi·ªõi h·∫°n k√Ω t·ª±",
        description: `VƒÉn b·∫£n qu√° d√†i (${text.length}/${maxCharacters} k√Ω t·ª±). Vui l√≤ng n√¢ng c·∫•p g√≥i ƒë·ªÉ ƒë∆∞·ª£c gi·ªõi h·∫°n cao h∆°n.`,
        variant: "destructive",
      });
              setTimeout(() => {
          window.location.href = "/features";
        }, 1500);
      return;
    }

    // Check subscription limits for authenticated users
    if (isAuthenticated) {
      const subscriptionType = user?.subscriptionType || 'free';
      const currentFiles = audioFiles?.length || 0;
      const maxFiles = getMaxFiles(subscriptionType);
      
      if (currentFiles >= maxFiles) {
        toast({
          title: "ƒê√£ v∆∞·ª£t gi·ªõi h·∫°n file",
          description: `G√≥i ${subscriptionType} ch·ªâ cho ph√©p t·ªëi ƒëa ${maxFiles} file. Vui l√≤ng n√¢ng c·∫•p t√†i kho·∫£n.`,
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/features";
        }, 1500);
        return;
      }
    }

    try {
      const result = await generateAudio(text, {
        voice: voiceToUse,
        rate: speed[0],
        pitch: pitch[0],
        volume: volume[0]
      });
      
      if (result === 'generated') {
        toast({
          title: "üéµ T·∫°o gi·ªçng n√≥i th√†nh c√¥ng!",
          description: isAuthenticated ? 
            "Audio ƒë√£ ƒë∆∞·ª£c t·∫°o v√† l∆∞u v√†o th∆∞ vi·ªán c·ªßa b·∫°n" : 
            "Audio ƒë√£ ƒë∆∞·ª£c t·∫°o (ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u v√†o th∆∞ vi·ªán)",
          duration: 3000,
        });
      } else if (result === 'reused') {
        toast({
          title: "üîÑ S·ª≠ d·ª•ng audio c√≥ s·∫µn",
          description: "C√†i ƒë·∫∑t ch∆∞a thay ƒë·ªïi, s·ª≠ d·ª•ng l·∫°i audio tr∆∞·ªõc ƒë√≥",
          duration: 2000,
        });
      }
    } catch (error) {
      console.error('üö® Generate audio error:', error);
      toast({
        title: "L·ªói t·∫°o gi·ªçng n√≥i",
        description: "Kh√¥ng th·ªÉ t·∫°o gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive",
      });
    }
  };

  // Helper function to get max files based on subscription
  const getMaxFiles = (subscriptionType: string) => {
    if (subscriptionType === 'premium') return appSettings?.premiumMaxFiles || 1000;
    if (subscriptionType === 'pro') return appSettings?.proMaxFiles || 100;
    return appSettings?.freeMaxFiles || 5;
  };

  const handlePlayAudio = () => {
    if (hasGeneratedAudio) {
      playAudio();
    }
  };

  // Text processing functions
  const normalizeText = () => {
    if (!text.trim()) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ chu·∫©n h√≥a",
        variant: "destructive",
      });
      return;
    }

    let normalized = text
      // Chu·∫©n h√≥a d·∫•u c√°ch
      .replace(/\s+/g, ' ')
      .trim()
      // Chu·∫©n h√≥a d·∫•u c√¢u
      .replace(/([.!?])\s*([A-Z√Å√Ä·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√â√à·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√ç√å·ªä·ªàƒ®√ì√í·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ö√ô·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ√ù·ª≤·ª¥·ª∂·ª∏ƒê])/g, '$1 $2')
      // X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng c·∫ßn thi·∫øt
      .replace(/[^\w\s\u00C0-\u024F\u1E00-\u1EFF.,!?;:()""''`-]/g, '')
      // Chu·∫©n h√≥a d·∫•u ngo·∫∑c k√©p
      .replace(/[""]/g, '"')
      .replace(/['']/g, "'");
    
    setText(normalized);
    toast({
      title: "Th√†nh c√¥ng",
      description: "ƒê√£ chu·∫©n h√≥a vƒÉn b·∫£n",
    });
  };

  const checkSpelling = () => {
    if (!text.trim()) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ ki·ªÉm tra",
        variant: "destructive",
      });
      return;
    }

    // S·ª≠a l·ªói ch√≠nh t·∫£ ph·ªï bi·∫øn trong ti·∫øng Vi·ªát v·ªõi ƒë·ªô ch√≠nh x√°c cao
    let corrected = text;
    let changeCount = 0;
    const changedWords: string[] = [];
    
    // Ch·ªâ s·ª≠a nh·ªØng t·ª´ vi·∫øt t·∫Øt r·∫•t ch·∫Øc ch·∫Øn v√† an to√†n
    const corrections = [
      // T·ª´ vi·∫øt t·∫Øt ph·ªï bi·∫øn nh·∫•t - ho√†n to√†n an to√†n
      { from: /\bko\b/gi, to: 'kh√¥ng', desc: 'ko ‚Üí kh√¥ng' },
      { from: /\bdc\b/gi, to: 'ƒë∆∞·ª£c', desc: 'dc ‚Üí ƒë∆∞·ª£c' },
      { from: /\bƒëc\b/gi, to: 'ƒë∆∞·ª£c', desc: 'ƒëc ‚Üí ƒë∆∞·ª£c' },
      { from: /\bvs\b/gi, to: 'v·ªõi', desc: 'vs ‚Üí v·ªõi' },
      { from: /\bms\b/gi, to: 'm√¨nh', desc: 'ms ‚Üí m√¨nh' },
      { from: /\bbn\b/gi, to: 'b·∫°n', desc: 'bn ‚Üí b·∫°n' },
      { from: /\bmk\b/gi, to: 'm√¨nh', desc: 'mk ‚Üí m√¨nh' },
      
      // T·ª´ vi·∫øt t·∫Øt ƒë·∫∑c bi·ªát
      { from: /\btk\b/gi, to: 't√†i kho·∫£n', desc: 'tk ‚Üí t√†i kho·∫£n' },
      { from: /\bsp\b/gi, to: 's·∫£n ph·∫©m', desc: 'sp ‚Üí s·∫£n ph·∫©m' },
      { from: /\bmn\b/gi, to: 'm·ªçi ng∆∞·ªùi', desc: 'mn ‚Üí m·ªçi ng∆∞·ªùi' },
      { from: /\bae\b/gi, to: 'anh em', desc: 'ae ‚Üí anh em' },
      
      // T·ª´ chat ph·ªï bi·∫øn
      { from: /\bchx\b/gi, to: 'ch∆∞a', desc: 'chx ‚Üí ch∆∞a' },
      { from: /\bcx\b/gi, to: 'c≈©ng', desc: 'cx ‚Üí c≈©ng' },
      { from: /\bkb\b/gi, to: 'kh√¥ng bi·∫øt', desc: 'kb ‚Üí kh√¥ng bi·∫øt' },
      { from: /\bkbt\b/gi, to: 'kh√¥ng bi·∫øt', desc: 'kbt ‚Üí kh√¥ng bi·∫øt' },
      
      // T·ª´ ƒë∆°n gi·∫£n
      { from: /\boke\b/gi, to: 'ok', desc: 'oke ‚Üí ok' },
      { from: /\bokela\b/gi, to: 'ok', desc: 'okela ‚Üí ok' },
      
      // Ch·ªâ s·ª≠a khi ch·∫Øc ch·∫Øn 100%
      { from: /(?<!\w)j(?!\w)/gi, to: 'g√¨', desc: 'j ‚Üí g√¨' },
      { from: /(?<!\w)wa(?!\w)/gi, to: 'qu√°', desc: 'wa ‚Üí qu√°' },
      { from: /(?<!\w)ny(?!\w)/gi, to: 'n√†y', desc: 'ny ‚Üí n√†y' }
    ];

    // √Åp d·ª•ng t·ª´ng rule m·ªôt c√°ch c·∫©n th·∫≠n
    corrections.forEach(correction => {
      const beforeCorrection = corrected;
      corrected = corrected.replace(correction.from, (match) => {
        // ƒê·∫øm s·ªë l·∫ßn thay th·∫ø
        changeCount++;
        changedWords.push(correction.desc);
        return correction.to;
      });
    });
    
    // Ki·ªÉm tra xem c√≥ thay ƒë·ªïi g√¨ kh√¥ng
    if (corrected !== text) {
      setText(corrected);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o chi ti·∫øt
      const uniqueChanges = Array.from(new Set(changedWords));
      toast({
        title: "ƒê√£ s·ª≠a l·ªói ch√≠nh t·∫£",
        description: `S·ª≠a ${changeCount} l·ªói: ${uniqueChanges.slice(0, 3).join(', ')}${uniqueChanges.length > 3 ? '...' : ''}`,
      });
    } else {
      toast({
        title: "Ho√†n t·∫•t ki·ªÉm tra",
        description: "Kh√¥ng t√¨m th·∫•y l·ªói ch√≠nh t·∫£ ph·ªï bi·∫øn c·∫ßn s·ª≠a",
      });
    }
  };

  const highlightDifficultWords = () => {
    if (!text.trim()) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ ph√¢n t√≠ch",
        variant: "destructive",
      });
      return;
    }

    // Danh s√°ch t·ª´ kh√≥ ph√°t √¢m trong ti·∫øng Vi·ªát
    const difficultWords = [
      'nghi√™m', 'nghi·ªáp', 'nghi·ªÅn', 'nghi√™ng', 'nghi√™u',
      'thu·ªü', 'thu·∫ßn', 'thu·∫≠t', 'thu·ªôc', 'thu·∫ßn',
      'ph∆∞·ªùng', 'ph∆∞·ª£ng', 'ph∆∞∆°ng', 'ph∆∞·ªõc', 'ph·ª•ng',
      'tr∆∞·ªùng', 'tr∆∞·ª£ng', 'tr∆∞∆°ng', 'tr∆∞·ªõc', 'tr·ª•ng',
      'khu√¥n', 'khu√¥ng', 'khu·ªëng', 'khu·∫•y', 'khu·∫•t',
      'gi∆∞·ªùng', 'gi∆∞·ª£ng', 'gi∆∞∆°ng', 'gi∆∞·ªõc', 'gi·ª•ng',
      'nguy√™n', 'nguy·ªát', 'nguy·ªán', 'nguy·ªÅn'
    ];

    let highlighted = text;
    let foundWords = [];

    difficultWords.forEach(word => {
      const regex = new RegExp(`\\b${word}\\b`, 'gi');
      if (regex.test(text)) {
        foundWords.push(word);
        highlighted = highlighted.replace(regex, `**${word}**`);
      }
    });

    if (foundWords.length > 0) {
      setText(highlighted);
      toast({
        title: "ƒê√£ ƒë√°nh d·∫•u t·ª´ kh√≥",
        description: `T√¨m th·∫•y ${foundWords.length} t·ª´ kh√≥ ph√°t √¢m (ƒë√°nh d·∫•u b·∫±ng **)`,
      });
    } else {
      toast({
        title: "Ho√†n t·∫•t",
        description: "Kh√¥ng t√¨m th·∫•y t·ª´ kh√≥ ph√°t √¢m ph·ªï bi·∫øn",
      });
    }
  };

  const handlePause = () => {
    if (isPlaying) {
      pause();
    } else if (isPaused) {
      resume();
    }
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };
  


  return (
    <section id="tts-tool" className="py-16 bg-gray-50 dark:bg-gray-900">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold mb-4">C√¥ng C·ª• Chuy·ªÉn ƒê·ªïi Text-to-Speech</h2>
          <p className="text-gray-600 dark:text-gray-400 text-lg">
            Nh·∫≠p vƒÉn b·∫£n ho·∫∑c t·∫£i file l√™n ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh gi·ªçng n√≥i ch·∫•t l∆∞·ª£ng cao
          </p>
          {!isAuthenticated && (
            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 max-w-2xl mx-auto mt-6">
              <p className="text-blue-700 dark:text-blue-300 text-sm">
                ‚ú® B·∫°n ƒëang s·ª≠ d·ª•ng g√≥i mi·ªÖn ph√≠ (t·ªëi ƒëa {maxCharacters} k√Ω t·ª±). 
                <a href="/login" className="ml-1 underline hover:text-blue-600">ƒêƒÉng nh·∫≠p</a> ƒë·ªÉ m·ªü kh√≥a th√™m t√≠nh nƒÉng!
              </p>
            </div>
          )}
          
          {/* Warning for guest users */}
          {!isAuthenticated && (
            <Alert className="mt-6 max-w-2xl mx-auto border-amber-200 bg-amber-50 dark:border-amber-800 dark:bg-amber-950">
              <AlertDescription className="text-amber-800 dark:text-amber-200">
                <strong>L∆∞u √Ω:</strong> Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ch·ªâ c√≥ th·ªÉ nghe audio t·∫°m th·ªùi. 
                File s·∫Ω b·ªã x√≥a sau 1 gi·ªù. <a href="/register" className="underline font-medium">ƒêƒÉng k√Ω</a> ƒë·ªÉ l∆∞u tr·ªØ vƒ©nh vi·ªÖn!
              </AlertDescription>
            </Alert>
          )}
        </div>

        {/* Quota Warning for Free Users */}
        {isAuthenticated && appSettings && (
          <QuotaWarning 
            currentUsage={audioFiles.length} 
            maxUsage={appSettings.freeMaxFiles || 5} 
          />
        )}

        <Card className="shadow-xl">
          <CardContent className="p-6 md:p-8">
            {/* File Upload Area */}
            <div className="mb-8">
              <div
                {...dragProps}
                className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-xl p-8 text-center hover:border-primary-500 transition-colors duration-200 cursor-pointer"
                onClick={() => document.getElementById('file-input')?.click()}
              >
                <CloudUpload className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-lg font-medium mb-2">
                  {isUploading ? "ƒêang x·ª≠ l√Ω file..." : "K√©o th·∫£ file ho·∫∑c nh·∫•n ƒë·ªÉ ch·ªçn"}
                </p>
                <p className="text-gray-500 dark:text-gray-400">
                  H·ªó tr·ª£ PDF, Word, TXT (t·ªëi ƒëa 10MB)
                </p>
                <input
                  id="file-input"
                  type="file"
                  className="hidden"
                  accept=".pdf,.doc,.docx,.txt"
                  onChange={(e) => {
                    const file = e.target.files?.[0];
                    if (file) uploadFile(file);
                  }}
                />
                {isUploading && (
                  <div className="mt-4 flex items-center justify-center">
                    <Loader2 className="h-6 w-6 animate-spin mr-2" />
                    <span>ƒêang tr√≠ch xu·∫•t vƒÉn b·∫£n...</span>
                  </div>
                )}
              </div>
            </div>

            <div className="grid lg:grid-cols-3 gap-8">
              {/* Text Editor */}
              <div className="lg:col-span-2 space-y-4">
                <Label className="text-sm font-medium">N·ªôi dung vƒÉn b·∫£n</Label>
                <div className="relative">
                  <Textarea
                    value={text}
                    onChange={(e) => {
                        setText(e.target.value);
                    }}
                    className="min-h-80 resize-none"
                    placeholder="Nh·∫≠p vƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi th√†nh gi·ªçng n√≥i..."
                  />
                  <div className={`absolute bottom-4 right-4 text-sm px-2 py-1 rounded ${
                    text.length > maxCharacters * 0.9 
                      ? 'text-red-500 bg-red-50 dark:bg-red-900/20' 
                      : 'text-gray-500 bg-white dark:bg-gray-800'
                  }`}>
                    {text.length}/{maxCharacters} k√Ω t·ª±
                  </div>
                  {text.length >= maxCharacters && (
                    <div className="absolute bottom-12 right-4 text-xs text-red-500 bg-red-50 dark:bg-red-900/20 px-2 py-1 rounded">
                      ƒê√£ ƒë·∫°t gi·ªõi h·∫°n k√Ω t·ª±
                    </div>
                  )}
                </div>

                {/* Text Statistics */}
                {text.trim() && (
                  <Card className="bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800">
                    <CardContent className="p-4">
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                        <div className="text-center">
                          <div className="font-semibold text-blue-700 dark:text-blue-300">
                            {text.trim().split(/\s+/).length}
                          </div>
                          <div className="text-blue-600 dark:text-blue-400">T·ª´</div>
                        </div>
                        <div className="text-center">
                          <div className="font-semibold text-blue-700 dark:text-blue-300">
                            {text.split(/[.!?]+/).filter(s => s.trim()).length}
                          </div>
                          <div className="text-blue-600 dark:text-blue-400">C√¢u</div>
                        </div>
                        <div className="text-center">
                          <div className="font-semibold text-blue-700 dark:text-blue-300">
                            {Math.ceil(text.trim().split(/\s+/).length / 150 * speed[0])}
                          </div>
                          <div className="text-blue-600 dark:text-blue-400">Ph√∫t ∆∞·ªõc t√≠nh</div>
                        </div>
                        <div className="text-center">
                          <div className="font-semibold text-blue-700 dark:text-blue-300">
                            {Math.ceil(text.length / 1000)}MB
                          </div>
                          <div className="text-blue-600 dark:text-blue-400">K√≠ch th∆∞·ªõc ∆∞·ªõc t√≠nh</div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )}

                {/* Text Templates - Moved here and compacted */}
                <div className="mt-4">
                  <TextTemplatesCompact onSelectTemplate={(content: string) => setText(content)} />
                </div>

                {/* Text Processing Options */}
                <div className="flex flex-wrap gap-2">
                  <Button variant="outline" size="sm" onClick={normalizeText}>
                    <FileText className="mr-2 h-4 w-4" />
                    Chu·∫©n h√≥a vƒÉn b·∫£n
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={checkSpelling}
                    disabled={!isAuthenticated || user?.subscriptionType === 'free'}
                    className="relative"
                  >
                    <SpellCheck className="mr-2 h-4 w-4" />
                    Ki·ªÉm tra ch√≠nh t·∫£
                    {(!isAuthenticated || user?.subscriptionType === 'free') && (
                      <Badge variant="outline" className="text-xs ml-2">Pro</Badge>
                    )}
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={highlightDifficultWords}
                    disabled={!isAuthenticated || user?.subscriptionType === 'free'}
                    className="relative"
                  >
                    <Languages className="mr-2 h-4 w-4" />
                    Ph√°t √¢m t·ª´ kh√≥
                    {(!isAuthenticated || user?.subscriptionType === 'free') && (
                      <Badge variant="outline" className="text-xs ml-2">Pro</Badge>
                    )}
                  </Button>
                </div>
              </div>

              {/* Controls Panel */}
              <div className="space-y-6">
                <Card className="bg-gray-50 dark:bg-gray-700">
                  <CardContent className="p-6">
                    <h3 className="font-semibold mb-4">C√†i ƒë·∫∑t gi·ªçng ƒë·ªçc</h3>
                    
                    {/* Voice Selection */}
                    <div className="mb-4">
                      <Label className="text-sm font-medium mb-2">Gi·ªçng ƒë·ªçc</Label>
                      <Select value={voice} onValueChange={handleVoiceChange}>
                        <SelectTrigger>
                          <SelectValue placeholder="Ch·ªçn gi·ªçng ƒë·ªçc" />
                        </SelectTrigger>
                        <SelectContent>
                          {Array.isArray(voices) && voices.length > 0 ? (
                            <>
                              {/* FPT AI Voices - Vietnamese */}
                              {voices.filter((v: any) => v.provider === "fpt").length > 0 && (
                                <>
                                  <div className="px-2 py-1 text-xs font-semibold text-gray-600 bg-gray-100 rounded">
                                    üáªüá≥ FPT AI - Ti·∫øng Vi·ªát
                                  </div>
                                  {voices.filter((v: any) => v.provider === "fpt").map((voice: any) => (
                                    <TooltipProvider key={voice.id} delayDuration={200}>
                                      <Tooltip>
                                        <TooltipTrigger asChild>
                                          <div>
                                            <SelectItem 
                                              value={voice.id}
                                              disabled={!!voice.disabled}
                                              className={voice.disabled ? "opacity-50 cursor-not-allowed" : ""}
                                              onClick={e => {
                                                if (voice.disabled) {
                                                  e.preventDefault();
                                                  if (voice.tier === "registered") {
                                                    window.alert("ƒêƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y!");
                                                  } else if (voice.tier === "pro") {
                                                    window.alert("N√¢ng c·∫•p g√≥i PRO ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y!");
                                                  } else if (voice.tier === "premium") {
                                                    window.alert("N√¢ng c·∫•p g√≥i PREMIUM ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y!");
                                                  }
                                                }
                                              }}
                                            >
                                              <span>
                                                {voice.gender === "female" ? "üë©" : "üë®"} {voice.name}
                                                {voice.region && ` - ${voice.region === "north" ? "Mi·ªÅn B·∫Øc" : 
                                                  voice.region === "south" ? "Mi·ªÅn Nam" : "Mi·ªÅn Trung"}`}
                                                {voice.tier === "registered" && <Badge className="ml-2" variant="secondary">ƒêƒÉng k√Ω</Badge>}
                                                {voice.tier === "pro" && <Badge className="ml-2" variant="outline">PRO</Badge>}
                                                {voice.tier === "premium" && <Badge className="ml-2" variant="destructive">PREMIUM</Badge>}
                                              </span>
                                            </SelectItem>
                                          </div>
                                        </TooltipTrigger>
                                        {voice.disabled && (
                                          <TooltipContent side="right">
                                            {voice.tier === "registered" && "ƒêƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y"}
                                            {voice.tier === "pro" && "N√¢ng c·∫•p g√≥i PRO ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y"}
                                            {voice.tier === "premium" && "N√¢ng c·∫•p g√≥i PREMIUM ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y"}
                                          </TooltipContent>
                                        )}
                                      </Tooltip>
                                    </TooltipProvider>
                                  ))}
                                </>
                              )}
                              {/* OpenAI Voices - English */}
                              {voices.filter((v: any) => v.provider === "openai").length > 0 && (
                                <>
                                  <div className="px-2 py-1 text-xs font-semibold text-gray-600 bg-gray-100 rounded mt-2">
                                    üá∫üá∏ OpenAI - English
                                  </div>
                                  {voices.filter((v: any) => v.provider === "openai").map((voice: any) => (
                                    <TooltipProvider key={voice.id} delayDuration={200}>
                                      <Tooltip>
                                        <TooltipTrigger asChild>
                                          <div>
                                            <SelectItem 
                                              value={voice.id}
                                              disabled={!!voice.disabled}
                                              className={voice.disabled ? "opacity-50 cursor-not-allowed" : ""}
                                              onClick={e => {
                                                if (voice.disabled) {
                                                  e.preventDefault();
                                                  if (voice.tier === "registered") {
                                                    window.alert("ƒêƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y!");
                                                  } else if (voice.tier === "pro") {
                                                    window.alert("N√¢ng c·∫•p g√≥i PRO ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y!");
                                                  } else if (voice.tier === "premium") {
                                                    window.alert("N√¢ng c·∫•p g√≥i PREMIUM ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y!");
                                                  }
                                                }
                                              }}
                                            >
                                              <span>
                                                {voice.gender === "female" ? "üë©" : voice.gender === "male" ? "üë®" : "ü§ñ"} {voice.name}
                                                {voice.tier === "pro" && <Badge className="ml-2" variant="outline">PRO</Badge>}
                                                {voice.tier === "premium" && <Badge className="ml-2" variant="destructive">PREMIUM</Badge>}
                                              </span>
                                            </SelectItem>
                                          </div>
                                        </TooltipTrigger>
                                        {voice.disabled && (
                                          <TooltipContent side="right">
                                            {voice.tier === "registered" && "ƒêƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y"}
                                            {voice.tier === "pro" && "N√¢ng c·∫•p g√≥i PRO ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y"}
                                            {voice.tier === "premium" && "N√¢ng c·∫•p g√≥i PREMIUM ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√†y"}
                                          </TooltipContent>
                                        )}
                                      </Tooltip>
                                    </TooltipProvider>
                                  ))}
                                </>
                              )}
                            </>
                          ) : (
                            <>
                              <SelectItem value="alloy">ü§ñ Alloy - Mi·ªÖn ph√≠</SelectItem>
                              <SelectItem value="banmai" disabled className="opacity-50">
                                üë© Ban Mai üîì ƒêƒÇNG K√ù - Gi·ªçng n·ªØ mi·ªÅn B·∫Øc
                              </SelectItem>
                              <SelectItem value="leminh" disabled className="opacity-50">
                                üë® L√™ Minh üíé PREMIUM - Gi·ªçng nam mi·ªÅn B·∫Øc
                              </SelectItem>
                              <SelectItem value="thuminh" disabled className="opacity-50">
                                üë© Thu Minh üíé PREMIUM - Gi·ªçng n·ªØ mi·ªÅn Nam
                              </SelectItem>
                              <SelectItem value="ngoclam" disabled className="opacity-50">
                                üë© Ng·ªçc Lam ‚≠ê PRO - Gi·ªçng n·ªØ mi·ªÅn Trung
                              </SelectItem>
                              <SelectItem value="echo" disabled className="opacity-50">
                                üë® Echo ‚≠ê PRO - English
                              </SelectItem>
                              <SelectItem value="nova" disabled className="opacity-50">
                                üë© Nova üíé PREMIUM - English
                              </SelectItem>
                            </>
                          )}
                        </SelectContent>
                      </Select>
                    </div>

                    {/* Speed Control */}
                    <div className="mb-4">
                      <Label className="text-sm font-medium mb-2">T·ªëc ƒë·ªô ƒë·ªçc</Label>
                      <Slider
                        value={speed}
                        onValueChange={setSpeed}
                        min={0.5}
                        max={2}
                        step={0.1}
                        className="w-full"
                      />
                      <div className="flex justify-between text-sm text-gray-500 mt-1">
                        <span>Ch·∫≠m</span>
                        <span>{speed[0].toFixed(1)}x</span>
                        <span>Nhanh</span>
                      </div>
                    </div>

                    {/* Pitch Control - Pro Feature */}
                    <div className="mb-4">
                      <div className="flex items-center justify-between mb-2">
                        <Label className="text-sm font-medium">Cao ƒë·ªô gi·ªçng</Label>
                        {(!isAuthenticated || user?.subscriptionType === 'free') && (
                          <Badge variant="outline" className="text-xs">Pro</Badge>
                        )}
                      </div>
                      <Slider
                        value={pitch}
                        onValueChange={setPitch}
                        min={0.5}
                        max={2}
                        step={0.1}
                        className="w-full"
                        disabled={!isAuthenticated || user?.subscriptionType === 'free'}
                      />
                      <div className="flex justify-between text-sm text-gray-500 mt-1">
                        <span>Th·∫•p</span>
                        <span>{pitch[0].toFixed(1)}</span>
                        <span>Cao</span>
                      </div>
                    </div>

                    {/* Volume Control */}
                    <div className="mb-6">
                      <Label className="text-sm font-medium mb-2">√Çm l∆∞·ª£ng</Label>
                      <Slider
                        value={volume}
                        onValueChange={(newVolume) => {
                          setVolume(newVolume);
                          handleVolumeChange(newVolume); // Sync v·ªõi playback volume
                        }}
                        min={0}
                        max={1}
                        step={0.1}
                        className="w-full"
                      />
                      <div className="flex justify-between text-sm text-gray-500 mt-1">
                        <span>0%</span>
                        <span>{Math.round(volume[0] * 100)}%</span>
                        <span>100%</span>
                      </div>
                    </div>

                    {/* Save Settings Button */}
                    <Button
                      onClick={savePreferences}
                      variant="outline"
                      size="sm"
                      className="w-full mb-4"
                    >
                      <Settings className="mr-2 h-4 w-4" />
                      L∆∞u c√†i ƒë·∫∑t n√†y
                    </Button>

                    {/* Voice Preview */}
                    <div className="mb-6">
                      <VoicePreview 
                        voice={voice}
                        speed={speed[0]}
                        pitch={pitch[0]}
                        volume={volume[0]}
                        previewText={text || "ƒê√¢y l√† gi·ªçng n√≥i m·∫´u ƒë·ªÉ b·∫°n nghe th·ª≠."}
                      />
                    </div>

                    {/* Advanced Settings - Premium Feature */}
                    <Collapsible open={isAdvancedOpen} onOpenChange={setIsAdvancedOpen}>
                      <CollapsibleTrigger asChild>
                        <Button variant="ghost" className="w-full justify-between p-0">
                          <span className="font-medium">C√†i ƒë·∫∑t n√¢ng cao</span>
                          <div className="flex items-center gap-2">
                            {(!isAuthenticated || user?.subscriptionType === 'free') && (
                              <Badge variant="outline" className="text-xs">Premium</Badge>
                            )}
                            <Settings className="h-4 w-4" />
                          </div>
                        </Button>
                      </CollapsibleTrigger>
                      <CollapsibleContent className="space-y-3 mt-3">
                        {(!isAuthenticated || user?.subscriptionType === 'free') ? (
                          <div className="bg-gradient-to-r from-purple-50 to-blue-50 p-4 rounded-lg border">
                            <div className="flex items-center gap-2 mb-2">
                              <Crown className="h-4 w-4 text-purple-600" />
                              <span className="font-medium text-purple-800">T√≠nh nƒÉng Premium</span>
                            </div>
                            <p className="text-sm text-purple-600 mb-3">
                              N√¢ng c·∫•p ƒë·ªÉ s·ª≠ d·ª•ng c√°c t√πy ch·ªânh n√¢ng cao nh∆∞ nh·∫•n m·∫°nh, SSML v√† nhi·ªÅu h∆°n n·ªØa.
                            </p>
                            <Button 
                              size="sm" 
                              onClick={() => window.location.href = '/features'}
                              className="bg-purple-600 hover:bg-purple-700"
                            >
                              Xem t√≠nh nƒÉng
                            </Button>
                          </div>
                        ) : (
                          <>
                            <div>
                              <Label className="text-sm font-medium mb-1">Nh·∫•n m·∫°nh</Label>
                              <Select defaultValue="normal">
                                <SelectTrigger>
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="normal">B√¨nh th∆∞·ªùng</SelectItem>
                                  <SelectItem value="light">Nh·∫π</SelectItem>
                                  <SelectItem value="strong">M·∫°nh</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                            <div>
                              <Label className="text-sm font-medium mb-1">T·∫°m d·ª´ng gi·ªØa c√¢u</Label>
                              <Slider
                                defaultValue={[0.5]}
                                min={0}
                                max={2}
                                step={0.1}
                                className="w-full"
                              />
                            </div>
                          </>
                        )}
                      </CollapsibleContent>
                    </Collapsible>
                  </CardContent>
                </Card>

                {/* Action Buttons */}
                <div className="space-y-3">
                  {/* Generate Audio Button */}
                  <Button 
                    onClick={handleGenerateAudio}
                    disabled={isGenerating || !text.trim() || isGenerateDisabled}
                    className={`w-full ${isGenerateDisabled ? 'bg-gray-400 text-gray-200 cursor-not-allowed' : 'gradient-primary hover:shadow-lg transform hover:scale-105'} text-white transition-all duration-200`}
                  >
                    {isGenerating ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ƒêang t·∫°o...
                      </>
                    ) : isGenerateDisabled ? (
                      <>
                        <Play className="mr-2 h-4 w-4" />
                        ƒê√£ t·∫°o xong
                      </>
                    ) : (
                      <>
                        <Play className="mr-2 h-4 w-4" />
                        T·∫°o gi·ªçng n√≥i
                      </>
                    )}
                  </Button>

                  {/* Audio Controls */}
                  {hasGeneratedAudio && (
                    <div className="flex gap-2">
                      <Button 
                        onClick={handlePlayAudio}
                        variant="outline"
                        className="flex-1"
                        disabled={isPlaying}
                      >
                        <Play className="mr-1 h-4 w-4" />
                        Nghe th·ª≠
                      </Button>
                      
                      <Button 
                        onClick={handlePause}
                        disabled={!isPlaying && !isPaused}
                        variant="outline"
                        className="flex-1"
                      >
                        {isPlaying ? (
                          <>
                            <Pause className="mr-1 h-4 w-4" />
                            T·∫°m d·ª´ng
                          </>
                        ) : (
                          <>
                            <Play className="mr-1 h-4 w-4" />
                            Ti·∫øp t·ª•c
                          </>
                        )}
                      </Button>

                      <Button 
                        onClick={stop}
                        variant="outline"
                        className="flex-1"
                        disabled={!isPlaying && !isPaused}
                      >
                        <Square className="mr-1 h-4 w-4" />
                        D·ª´ng
                      </Button>
                    </div>
                  )}

                  <Button 
                    onClick={downloadAudio}
                    disabled={!hasGeneratedAudio}
                    className="w-full bg-green-500 text-white hover:bg-green-600"
                  >
                    <Download className="mr-2 h-4 w-4" />
                    T·∫£i xu·ªëng MP3
                  </Button>
                  
                  {/* Debug: Manual Save Button */}
                  {hasGeneratedAudio && isAuthenticated && (
                    <Button 
                      onClick={async () => {
                        try {
                          console.log('üîß Manual save test - Starting...');
                          const response = await fetch('/api/audio-files', {
                            method: 'POST',
                            credentials: 'include', // Include session cookies
                            headers: {
                              'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                              title: `Audio Pro - ${new Date().toLocaleTimeString()}`,
                              content: text.substring(0, 100),
                              voice: voice || 'alloy',
                              speed: speed[0],
                              pitch: pitch[0],
                              volume: volume[0],
                              format: 'mp3',
                              duration: 10,
                              fileSize: 1000,
                              isPublic: false,
                            }),
                          });
                          
                          if (response.ok) {
                            const result = await response.json();
                            console.log('‚úÖ Manual save successful:', result);
                            toast({
                              title: "‚ú® L∆∞u v√†o th∆∞ vi·ªán th√†nh c√¥ng!",
                              description: `Audio "${result.title}" ƒë√£ ƒë∆∞·ª£c th√™m v√†o b·ªô s∆∞u t·∫≠p c·ªßa b·∫°n`,
                              duration: 5000,
                            });
                            
                            // Manually invalidate queries to refresh UI
                            window.location.reload();
                          } else {
                            const error = await response.text();
                            console.error('‚ùå Manual save failed:', error);
                            toast({
                              title: "‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u",
                              description: error,
                              variant: "destructive",
                            });
                          }
                        } catch (error) {
                          console.error('üö® Manual save error:', error);
                          toast({
                            title: "üö´ L·ªói k·∫øt n·ªëi",
                            description: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server",
                            variant: "destructive",
                          });
                        }
                      }}
                      variant="outline"
                      className="w-full bg-gradient-to-r from-blue-50 to-purple-50 hover:from-blue-100 hover:to-purple-100 border-blue-200 hover:border-purple-300 transition-all duration-300"
                    >
                      <Save className="mr-2 h-4 w-4 text-blue-600" />
                      ‚≠ê L∆∞u v√†o Th∆∞ Vi·ªán
                    </Button>
                  )}
                </div>
              </div>
            </div>

            {/* Audio Visualizer */}
            <Card className="mt-3 bg-gradient-to-br from-gray-50 to-blue-50 dark:from-gray-800 dark:to-gray-900 border-2 border-gray-200 dark:border-gray-700">
              <CardContent className="p-3">
                <div className="flex items-center justify-between mb-3">
                  <div>
                    <h3 className="font-semibold text-lg flex items-center gap-2">
                      <Volume2 className="h-5 w-5 text-blue-600" />
                      Hi·ªáu ·ª©ng √¢m thanh ngh·ªá thu·∫≠t
                    </h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                      Visualizer s√°ng t·∫°o v·ªõi hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
                    </p>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className={`w-3 h-3 rounded-full transition-all ${
                      isPlaying ? 'bg-green-400 animate-pulse shadow-lg shadow-green-400/50' : 
                      isPaused ? 'bg-yellow-400' : 'bg-gray-400'
                    }`} />
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-300">
                      {isPlaying ? "LIVE" : isPaused ? "PAUSED" : "READY"}
                    </span>
                  </div>
                </div>

                {/* Visualizer Mode Controls */}
                <div className="space-y-2 mb-3">
                  {/* Mode and Color Controls */}
                  <div className="flex flex-wrap items-center gap-2 p-3 bg-white dark:bg-gray-800 rounded-lg border">
                    <div className="flex items-center gap-2">
                      <Label className="text-xs font-medium">Ch·∫ø ƒë·ªô:</Label>
                      <Select value={visualizerMode} onValueChange={(value) => setVisualizerMode(value as "particles" | "liquid" | "neural" | "galaxy")}>
                        <SelectTrigger className="w-28 h-8">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="particles">Particles</SelectItem>
                          <SelectItem value="liquid">Liquid</SelectItem>
                          <SelectItem value="neural">Neural</SelectItem>
                          <SelectItem value="galaxy">Galaxy</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <Label className="text-xs font-medium">M√†u s·∫Øc:</Label>
                      <Select value={visualizerColor} onValueChange={(value) => setVisualizerColor(value as "sunset" | "ocean" | "forest" | "cosmic")}>
                        <SelectTrigger className="w-24 h-8">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="sunset">Sunset</SelectItem>
                          <SelectItem value="ocean">Ocean</SelectItem>
                          <SelectItem value="forest">Forest</SelectItem>
                          <SelectItem value="cosmic">Cosmic</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="flex items-center gap-2 ml-auto">
                      <Checkbox 
                        id="show-freq" 
                        checked={showFrequencyLabels}
                        onCheckedChange={(checked) => setShowFrequencyLabels(checked === true)}
                      />
                      <Label htmlFor="show-freq" className="text-xs">Hi·ªán t·∫ßn s·ªë</Label>
                    </div>
                  </div>


                </div>
                
                {/* Enhanced AudioVisualizer with professional features */}
                <div className="relative">
                  <AudioVisualizer 
                    isPlaying={isPlaying} 
                    height={140}
                    barCount={64}
                    mode={visualizerMode}
                    showFrequencyLabels={showFrequencyLabels}
                    color={visualizerColor}
                  />
                  
                  {/* Audio Quality Indicator */}
                  <div className="absolute top-3 left-3 bg-black/70 text-white px-3 py-1 rounded-full text-xs font-medium">
                    üìä 48kHz ‚Ä¢ 32-bit ‚Ä¢ Stereo
                  </div>

                  {/* Compact Volume Controls in Bottom Right */}
                  <div ref={volumeControlsRef} className="absolute bottom-3 right-3 flex items-center gap-2">
                    {/* Volume Icon Button */}
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setShowVolumeControls(!showVolumeControls)}
                      className="p-2 bg-black/70 hover:bg-black/80 rounded-full transition-all duration-200"
                    >
                      {isMuted || playbackVolume[0] === 0 ? (
                        <VolumeX className="h-4 w-4 text-red-400" />
                      ) : playbackVolume[0] < 0.3 ? (
                        <Volume1 className="h-4 w-4 text-white" />
                      ) : playbackVolume[0] < 0.7 ? (
                        <Volume2 className="h-4 w-4 text-blue-400" />
                      ) : (
                        <Volume2 className="h-4 w-4 text-green-400" />
                      )}
                    </Button>

                    {/* Volume Slider (shows when clicked) */}
                    {showVolumeControls && (
                      <div className="flex items-center gap-2 bg-black/80 backdrop-blur-sm px-3 py-2 rounded-full animate-in slide-in-from-right duration-200">
                        <Slider
                          value={playbackVolume}
                          onValueChange={handleVolumeChange}
                          max={1}
                          min={0}
                          step={0.05}
                          className="w-20"
                        />
                        <span className="text-white text-xs font-medium min-w-[2rem]">
                          {Math.round(playbackVolume[0] * 100)}%
                        </span>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={handleMuteToggle}
                          className="p-1 hover:bg-white/20 rounded"
                        >
                          {isMuted ? (
                            <VolumeX className="h-3 w-3 text-red-400" />
                          ) : (
                            <Volume2 className="h-3 w-3 text-white" />
                          )}
                        </Button>
                      </div>
                    )}
                  </div>
                </div>

                {/* Enhanced Progress Bar with Waveform */}
                <div className="mt-3 space-y-2">
                  <div className="flex justify-between items-center text-sm text-gray-600 dark:text-gray-400">
                    <span className="font-mono">{formatTime(currentTime)}</span>
                    <div className="flex items-center gap-2">
                      <span className="text-xs bg-blue-100 dark:bg-blue-900 px-2 py-1 rounded">
                        {Math.round(progress)}%
                      </span>
                    </div>
                    <span className="font-mono">{formatTime(duration)}</span>
                  </div>
                  
                  {/* Progress bar with gradient */}
                  <div className="relative">
                    <Progress 
                      value={progress} 
                      className="w-full h-2 bg-gray-200 dark:bg-gray-700" 
                    />
                    <div 
                      className="absolute top-0 h-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-300"
                      style={{ width: `${progress}%` }}
                    />
                    
                    {/* Playhead indicator */}
                    <div 
                      className={`absolute top-1/2 w-4 h-4 bg-white border-2 border-blue-500 rounded-full transform -translate-y-1/2 transition-all duration-100 ${
                        isPlaying ? 'shadow-lg shadow-blue-500/50' : ''
                      }`}
                      style={{ left: `calc(${progress}% - 8px)` }}
                    />
                  </div>
                  
                  {/* Audio Info Bar */}
                  <div className="flex justify-between items-center text-xs text-gray-500 bg-gray-100 dark:bg-gray-800 px-3 py-2 rounded">
                    <span>üéµ Voice: {voice || "Ch∆∞a ch·ªçn"}</span>
                    <span>‚ö° Speed: {speed[0]}x</span>
                    <span>üîä Volume: {Math.round(playbackVolume[0] * 100)}%</span>
                    <span>üìè {text.length} k√Ω t·ª±</span>
                  </div>
                </div>
              </CardContent>
            </Card>


          </CardContent>
        </Card>
      </div>
    </section>
  );
}
